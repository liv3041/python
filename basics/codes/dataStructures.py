"""
1. Tuples and Sequence

Tuples :- It consists of a number of values seperated by commas.
        - The values in tuples are immutables.
        - We can use lists which are mutable, as the elements or value of the tuples.

"""

t = 12345, 54321, 'hello!'
print(t[0])

u = (t,1,2,3,4,5)
print(u)

# The below statement will throw an type error.
# t[2] = 45

empty = ()
singleton = 'hello',
print(len(empty))
print(len(singleton))
print(singleton)

# Unpacking of tuple t, also known as sequence unpacking
x ,y , z = t
print(" x =  ",x, "y =  ",y," z = ", z )

"""
Sets : - It is an unordered collection with no duplicate elements.
       - Set objects support mathematical operations like union, intersection, difference, and symmmetric difference.
       - Can be created by curly braces {} or set() functions
       
Note: If we want to create an empty set then we use set() not {}. As empty curly braces{} creates an empty dictonary.
"""
basket = {'apple', 'orange','apple','pear','orange','banana'}
# on printing baskets, all the duplicates will be removed. The elements inside this set basket is arranged in unordered fashion.
print(basket)
# membership testing in set is done through 'in' operator
print('orange' in basket) # Output: True, present in the set basket
print('crabgrass' in basket) # Output: False, absent in the set basket
a = set('bumbumbole')
print(a)
b = set('mastimaidole')
print(b)

# letters that are present in a but is not present in b
print(a-b)

# letters that are present both in a and b or in a or b
print(a|b)

# letters that are present in both a and b
print(a & b)

# letters that are in a or in b but not in both
print(a^b)

# Set Comprehension is similar to list comprehension
a = {x for x in 'bumbumbole' if x in 'abc'}
print(a)

"""
Dictionaries: - Unlike sequences which are indexed by a range of numbers, dictionaries are indexed by keys.
              - If  a tuple is immutable and contain strings, numbers or tuples then it can act as key else a tuple contains any object that is mutable then it is not tuple.
              - Dictionary is represented in the form of key-value pair 


Note: We cannot use list as key as it is mutable and the elements present in the list can be modified by assignments, slice assignements or in built methods.
"""

anime_char = {'doraemon':'doracakes','korosuke':'koroke','dorami':'melon breads','optimus':'energon','ben10':'omnitrix'}
# Change the value of any key through assignment operator.
anime_char['optimus'] = 'autobots'
print(anime_char)

# Access any element through key
print(anime_char['doraemon'])

# print the list of sorted keys 
print(sorted(anime_char))

# we cannot access the values of the keys present in the list, generated by the sorted method. 
anime = sorted(anime_char)

# Will throw an type error if we try access the list with the keys as list can only be accesses through indexing 
# print(anime['dorami'])
print(anime[2])

print( 'dorami' in anime_char)

# This will give an false value because the membership test only happens for the keys in dictionary not for the values.
print( 'dorcake' in anime_char)

# This will give a true value as 'doracake' is not present as the key in the dictionary anime_char
print( 'dorcake' not in anime_char)

# We can create dictionary with the method dict()
characters = dict([('Percy Jackson','Poseidon'),('Annabeth','Athena'),('Thea','Zeus'),('Piper','Aphordite'),('Nico','Hades'),('Lucas','Apollo')])
print(characters)

# Dictionary Comprehensions:
print({x: x**2 for x in (2,4,6)})

# we can also give keyword argument in dictionary method
characters= dict(snake = 'reptiles',penguins = 'birds',crabs = 'crustaceans',frogs = 'amphibians')
print(characters)

# We cannot use keyword argument  as keys if we are defining  a dictionary and initialsing it with {}, this will lead to syntax error.
# characters = {snake = 'reptiles',penguins = 'birds'}

""" Looping Techniques in Data Structures """

#1.  Looping over a dictionaries 

# items() give key and value pair present in the dictionary.
for k ,v in characters.items():
    print(k, ":" ,v )

#2. Looping over a sequence

# enumerate() - gives position index and the corresponding values.
for i, v in enumerate(['tic','tac','toe']):
    print(i,v)

#3. Loop over two sequence simultaneously
questions = ['name', 'quest']
answers = ['Percy Jackson','to retrive Zeus\'s lightning bolt']
for q, a in zip(questions,answers):
    print('What is your {0}? It is {1}.'.format(q,a))

# Loop over sequence in reverse:
for i in reversed(range(1,10,2)):
    print(i)

#Loop over sequence in a sorted fashion:
fruits = ['apple','orange','apple','cherry','avacado','pears','pineapple','cherry','pears']
for i in sorted(fruits):
    print(i)

print("-"*34)
# prints a set of fruits containing unique elements in a sorted manner
for i in sorted(set(fruits)):
    print(i)
